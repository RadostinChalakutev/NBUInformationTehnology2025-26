/* –ó–∞–¥–∞—á–∞ 7. –î–∞ —Å–µ –¥–µ—Ñ–∏–Ω–∏—Ä–∞ –∫–ª–∞—Å Point —Å –¥–≤–µ —á–ª–µ–Ω-–¥–∞–Ω–Ω–∏ - –¥–≤–µ—Ç–µ –¥–µ–∫–∞—Ä—Ç–æ–≤–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–∞
—Ç–æ—á–∫–∞ –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏ —á–ª–µ–Ω-—Ñ—É–Ω–∫—Ü–∏–∏. –ö–∞—Ç–æ —Å–µ –∏–∑–ø–æ–ª–∑–≤–∞ –¥–µ—Ñ–∏–Ω–∏—Ä–∞–Ω–∏—è—Ç –∫–ª–∞—Å –¥–∞ —Å–µ
–Ω–∞–ø–∏—à–µ –ø—Ä–æ–≥—Ä–∞–º–∞, –∫–æ—è—Ç–æ:
–∞) –≤—ä–≤–µ–∂–¥–∞ n —Ä–∞–∑–ª–∏—á–Ω–∏ —Ç–æ—á–∫–∏ –æ—Ç —Ä–∞–≤–Ω–∏–Ω–∞—Ç–∞, —Å–ª–µ–¥ –∫–æ–µ—Ç–æ –≥–∏ —Ç—Ä–∞–Ω—Å–ª–∏—Ä–∞ —Å (2, 4) –∏
–∏–∑–≤–µ–∂–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—Ç–µ —Ç–æ—á–∫–∏;
–±) –Ω–∞–º–∏—Ä–∞ —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –º–µ–∂–¥—É –≤—Å–µ–∫–∏ –¥–≤–µ —Ç–æ—á–∫–∏ (–≤—Å–µ –µ–¥–Ω–æ —Å—Ç–∞—Ä–∏—Ç–µ –∏–ª–∏
–Ω–æ–≤–∏—Ç–µ);
‚àö(ùë•2 ‚àí ùë•1)2 + (ùë¶2 ‚àí ùë¶1)2;
–≤) –Ω–∞–º–∏—Ä–∞ —Ç–æ—á–∫–∏—Ç–µ, —Ä–∞–∑—Å—Ç–æ—è–Ω–∏–µ—Ç–æ –º–µ–∂–¥—É –∫–æ–∏—Ç–æ –µ –Ω–∞–π-–º–∞–ª–∫–æ (–Ω–∞–π-–≥–æ–ª—è–º–æ).*/

#include <iostream>
#include <vector>
#include <climits>
using namespace std;
template<class T>
class Point{
  private:
    T x;
    T y;

  public:
    Point (T x=0, T y=0) : x(x), y(y){}

    void translate( const Point& other){
      x+=other.x;
      y+=other.y;
    }
    double distance(const Point& other){
      return sqrt((x-other.x)*(x-other.x)+(y-other.y)*(y-other.y));

    }
    void print(){
      cout<<"("<<x<<","<<y<<")"<<endl;
    }


};

int main(){
  int n;
  cout<<"Enter number of points: ";
  cin>>n;
  vector<Point<double>>points;

  for(int i=0;i<n;i++){
    double x,y;
    cout<<"Enter coordinates of point: ";
    cin>>x>>y;
    points.push_back(Point<double>(x,y));

    cout<<"Translatec points: "<<endl;
    for(Point<double>& point:points){
    point.translate(Point<double>(2,4));

    point.print();


    }
  }
  cout<<"Distance between points: "<<endl;
  double minDistance=numeric_limits<double>::max();
  double maxDistance=0;
}